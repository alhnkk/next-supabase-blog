
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified Boolean     @default(false)
  image         String?
  username      String?     @unique
  phone         String?
  bio           String?
  password      String?     // ✅ Password alanı eklendi
  isAdmin       Boolean     @default(false)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  banExpires    DateTime?
  banReason     String?
  banned        Boolean?
  role          String?
  accounts      Account[]
  comments      Comment[]
  likes         Like[]
  posts         Post[]
  savedPosts    SavedPost[]
  sessions      Session[]
  views         View[]

  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#f59e0b")
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]

  @@map("categories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  color     String    @default("#6b7280")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     PostTag[]

  @@map("tags")
}

model Post {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  excerpt         String
  content         String
  coverImage      String?
  gallery         String[]    @default([])
  status          PostStatus  @default(DRAFT)
  postType        PostType    @default(ARTICLE)
  readingTime     Int?
  wordCount       Int?
  publishedAt     DateTime?
  scheduledAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  metaTitle       String?
  metaDescription String?
  ogImage         String?
  ogDescription   String?
  allowComments   Boolean     @default(true)
  allowLikes      Boolean     @default(true)
  isPinned        Boolean     @default(false)
  isFeatured      Boolean     @default(false)
  authorId        String
  categoryId      String
  comments        Comment[]
  likes           Like[]
  tags            PostTag[]
  author          User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category        Category    @relation(fields: [categoryId], references: [id])
  savedPosts      SavedPost[]
  views           View[]

  @@map("posts")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  isActive  Boolean   @default(true)
  isEdited  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parentId  String?
  authorId  String
  postId    String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  type      LikeType
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, type])
  @@unique([userId, commentId, type])
  @@map("likes")
}

model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("saved_posts")
}

model View {
  id        String   @id @default(cuid())
  ipAddress String?
  userAgent String?
  referrer  String?
  createdAt DateTime @default(now())
  userId    String?
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("views")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum PostType {
  ARTICLE
  REVIEW
  INTERVIEW
  POETRY
  SHORT_STORY
  ESSAY
  OPINION
  NEWS
}

enum LikeType {
  LIKE
  DISLIKE
}

model Settings {
  id            String    @id @default(cuid())
  siteName      String    @default("Blog")
  siteDescription String? @default("Modern blog platformu")
  siteUrl       String?   @default("https://next-supabase-blog-xi.vercel.app/") 
  siteLogo      String?
  adminEmail    String?   @default("admin@blog.com")
  defaultCategory String?
  postsPerPage  Int       @default(10)
  enableComments Boolean  @default(true)
  enableRegistration Boolean @default(true)
  maintenanceMode Boolean @default(false)
  
  // SEO Settings
  metaTitle     String?   @default("Blog - Modern Platform")
  metaDescription String? @default("Modern blog platformu")
  metaKeywords  String?   @default("blog, yazı, makale")
  ogImage       String?
  
  // Social Links
  socialTwitter   String?
  socialFacebook  String?
  socialInstagram String?
  socialLinkedin  String?
  socialGithub    String?
  
  // Email Settings
  smtpHost      String?
  smtpPort      Int?      @default(587)
  smtpUser      String?
  smtpPassword  String?
  fromEmail     String?   @default("noreply@blog.com")
  fromName      String?   @default("Blog")
  
  // Appearance Settings
  primaryColor  String    @default("#1e293b")
  accentColor   String    @default("#f59e0b")
  enableDarkMode Boolean  @default(false)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("settings")
}
